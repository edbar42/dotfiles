#!/usr/bin/env bash

# Example i3blocks configurations:
#
# For AMD CPU:
# [CPU-temperature]
# command=~/.config/i3/scripts/temperature --chip k10temp-pci-00c3
# interval=5
# T_WARN=70
# T_CRIT=90
#
# For AMD GPU:
# [GPU-temperature]
# command=~/.config/i3/scripts/temperature --chip amdgpu-pci-0300
# interval=5
# T_WARN=70
# T_CRIT=90
#
# For NVIDIA GPU:
# [GPU-temperature]
# command=~/.config/i3/scripts/temperature --chip nvidia-gpu-0
# interval=5
# T_WARN=70
# T_CRIT=90
#
# For NVMe drive:
# [NVME-temperature]
# command=~/.config/i3/scripts/temperature --chip nvme-pci-0100
# interval=5
# T_WARN=50
# T_CRIT=70

# Default values
T_WARN=${T_WARN:-70}
T_CRIT=${T_CRIT:-90}
SENSOR_CHIP=${1:-""}

# Help function
show_help() {
    echo "Usage: $0 [OPTIONS] --chip <chip>"
    echo "Options:"
    echo "  -w, --warn TEMP    Warning threshold temperature (default: 70째C)"
    echo "  -c, --crit TEMP    Critical threshold temperature (default: 90째C)"
    echo "  --chip CHIP        Sensor chip (e.g., k10temp-pci-00c3 for AMD CPU,"
    echo "                     nvme-pci-0100 for NVMe, amdgpu-pci-0300 for AMD GPU)"
    echo "  -h, --help         Show this help message"
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -w|--warn) T_WARN="$2"; shift 2 ;;
        -c|--crit) T_CRIT="$2"; shift 2 ;;
        --chip) SENSOR_CHIP="$2"; shift 2 ;;
        -h|--help) show_help ;;
        *) echo "Unknown parameter: $1"; show_help ;;
    esac
done

# Check if sensors command exists
if ! command -v sensors &> /dev/null; then
    echo "Error: 'sensors' command not found. Please install lm-sensors package."
    exit 1
fi

# Function to get temperature based on chip type
get_temperature() {
    local chip=$1
    local temp

case $chip in
        *"amdgpu"*)
            # AMD GPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].edge.temp1_input" 2>/dev/null)
            ;;
        *"nvidia"*)
            # NVIDIA GPU temperature (requires nvidia-smi)
            if command -v nvidia-smi &> /dev/null; then
                temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
            fi
            ;;
        *"k10temp"*)
            # AMD CPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Tctl.temp1_input" 2>/dev/null)
            ;;
        *"coretemp"*)
            # Intel CPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Package\\ id\\ 0.temp1_input" 2>/dev/null)
            ;;
        *"nvme"*)
            # NVMe drive temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Composite.temp1_input" 2>/dev/null)
            ;;
        *)
            # Generic temperature reading
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].temp1.temp1_input" 2>/dev/null)
            ;;
    esac

    # Check if temperature was found
    if [[ -z "$temp" || "$temp" == "null" ]]; then
        echo "Error: Cannot read temperature from $chip"
        exit 1
    fi

    echo "${temp%.*}"  # Remove decimal places
}

# Get temperature
TEMP=$(get_temperature "$SENSOR_CHIP")

# Select icon based on temperature
if [ "$TEMP" -lt 45 ]; then
    ICON=""
elif [ "$TEMP" -lt 55 ]; then
    ICON=""
elif [ "$TEMP" -lt 65 ]; then
    ICON=""
elif [ "$TEMP" -lt 75 ]; then
    ICON=""
else
    ICON=""
fi

# Output temperature
echo "$ICON $TEMP째C"
echo "$ICON $TEMP째C"

# Set color based on temperature thresholds
if [ "$TEMP" -ge "$T_CRIT" ]; then
    echo "#FF0000"
    exit 33
elif [ "$TEMP" -ge "$T_WARN" ]; then
    echo "#FFCC00"
fi

exit 0
