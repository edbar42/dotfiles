#!/usr/bin/env bash

# Default values
T_WARN=${T_WARN:-70}
T_CRIT=${T_CRIT:-90}
SENSOR_CHIP=${1:-""}

# Help function
show_help() {
    echo "Usage: $0 [OPTIONS] --chip <chip>"
    echo "Options:"
    echo "  -w, --warn TEMP    Warning threshold temperature (default: 70째C)"
    echo "  -c, --crit TEMP    Critical threshold temperature (default: 90째C)"
    echo "  --chip CHIP        Sensor chip (e.g., k10temp-pci-00c3 for AMD CPU,"
    echo "                     nvme-pci-0100 for NVMe, amdgpu-pci-0300 for AMD GPU)"
    echo "  -h, --help         Show this help message"
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -w|--warn) T_WARN="$2"; shift 2 ;;
        -c|--crit) T_CRIT="$2"; shift 2 ;;
        --chip) SENSOR_CHIP="$2"; shift 2 ;;
        -h|--help) show_help ;;
        *) echo "Unknown parameter: $1"; show_help ;;
    esac
done

# Check if sensors command exists
if ! command -v sensors &> /dev/null; then
    echo "Error: 'sensors' command not found. Please install lm-sensors package."
    exit 1
fi

# Function to get temperature based on chip type
get_temperature() {
    local chip=$1
    local temp

    case $chip in
        *"amdgpu"*)
            # AMD GPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].edge.temp1_input" 2>/dev/null)
            ;;
        *"nvidia"*)
            # NVIDIA GPU temperature (requires nvidia-smi)
            if command -v nvidia-smi &> /dev/null; then
                temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
            fi
            ;;
        *"k10temp"*)
            # AMD CPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Tctl.temp1_input" 2>/dev/null)
            ;;
        *"coretemp"*)
            # Intel CPU temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Package\\ id\\ 0.temp1_input" 2>/dev/null)
            ;;
        *"nvme"*)
            # NVMe drive temperature
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].Composite.temp1_input" 2>/dev/null)
            ;;
        *)
            # Generic temperature reading
            temp=$(sensors -j "$chip" 2>/dev/null | jq -r ".[\"$chip\"].temp1.temp1_input" 2>/dev/null)
            ;;
    esac

    # Check if temperature was found
    if [[ -z "$temp" || "$temp" == "null" ]]; then
        echo "Error: Cannot read temperature from $chip"
        exit 1
    fi

    echo "${temp%.*}"  # Remove decimal places
}

# Automatically detect the correct chip for CPU and GPU if not passed
if [ -z "$SENSOR_CHIP" ]; then
    if grep -i "amdgpu" /proc/cpuinfo &> /dev/null; then
        SENSOR_CHIP="amdgpu-pci-0300"  # Example AMD GPU chip ID
    elif grep -i "nvidia" /proc/cpuinfo &> /dev/null; then
        SENSOR_CHIP="nvidia-gpu-0"  # Example NVIDIA GPU chip ID
    elif grep -i "intel" /proc/cpuinfo &> /dev/null; then
        SENSOR_CHIP="coretemp"  # Example Intel CPU chip ID
    elif [ -d "/sys/class/thermal" ]; then
        # Assuming AMD or Intel CPU
        SENSOR_CHIP="k10temp-pci-00c3"  # Example AMD CPU chip ID (you can adjust)
    else
        echo "Error: Unable to auto-detect sensor chip"
        exit 1
    fi
fi

# Get temperature
TEMP=$(get_temperature "$SENSOR_CHIP")

# Define color based on temperature
if [ "$TEMP" -ge "$T_CRIT" ]; then
    COLOR="#FF0000"  # Critical color (red)
elif [ "$TEMP" -ge "$T_WARN" ]; then
    COLOR="#FFCC00"  # Warning color (yellow)
else
    COLOR="#98c379"  # Normal color (green)
fi

# Output temperature with color
echo "<span color='$COLOR'>$TEMP째C</span>"
echo "<span color='$COLOR'>$TEMP째C</span>"

exit 0

